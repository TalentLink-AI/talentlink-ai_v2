name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: talentlink

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm test

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watch=false --browsers=ChromeHeadless

  build-and-push:
    name: Build and Push Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build and push Frontend
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/frontend:${{ env.IMAGE_TAG }}

      - name: Build and push API Gateway
        uses: docker/build-push-action@v2
        with:
          context: ./backend/api-gateway
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/api-gateway:${{ env.IMAGE_TAG }}

      - name: Build and push User Service
        uses: docker/build-push-action@v2
        with:
          context: ./backend/user-service
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/user-service:${{ env.IMAGE_TAG }}

      - name: Build and push Job Service
        uses: docker/build-push-action@v2
        with:
          context: ./backend/job-service
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/job-service:${{ env.IMAGE_TAG }}

      - name: Build and push Payment Service
        uses: docker/build-push-action@v2
        with:
          context: ./backend/payment-service
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/payment-service:${{ env.IMAGE_TAG }}

      - name: Build and push Messaging Service
        uses: docker/build-push-action@v2
        with:
          context: ./backend/messaging-service
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/messaging-service:${{ env.IMAGE_TAG }}

      - name: Build and push Content Service
        uses: docker/build-push-action@v2
        with:
          context: ./backend/content-service
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}/content-service:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "ECS_CLUSTER=talentlink-cluster-production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
            echo "ECS_CLUSTER=talentlink-cluster-development" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Deploy Frontend to S3
        if: github.ref == 'refs/heads/main'
        run: |
          cd frontend/dist/angular-latest/browser
          aws s3 sync . s3://talentlink-frontend-${{ env.ENVIRONMENT }} --delete

      - name: Invalidate CloudFront cache
        if: github.ref == 'refs/heads/main'
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[?contains(@, 'talentlink-frontend-${{ env.ENVIRONMENT }}')]].Id" --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

      - name: Update ECS services
        run: |
          # Update API Gateway service
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
            --service talentlink-api-gateway-service-${{ env.ENVIRONMENT }} \
            --force-new-deployment

          # Update User Service
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
            --service talentlink-user-service-${{ env.ENVIRONMENT }} \
            --force-new-deployment

          # Update Job Service
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
            --service talentlink-job-service-${{ env.ENVIRONMENT }} \
            --force-new-deployment

          # Update Payment Service
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
            --service talentlink-payment-service-${{ env.ENVIRONMENT }} \
            --force-new-deployment

          # Update Messaging Service
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
            --service talentlink-messaging-service-${{ env.ENVIRONMENT }} \
            --force-new-deployment

          # Update Content Service
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
            --service talentlink-content-service-${{ env.ENVIRONMENT }} \
            --force-new-deployment
